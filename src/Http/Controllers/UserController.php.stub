<?php

namespace App\Http\Controllers\{{ $namespace }};

use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Str;
use Illuminate\Support\Arr;
use Illuminate\Validation\Rules\Password;

use App\Models\{{ $namespace }}\{{ $features.users.model_name }};

class {{ $features.users.controller_name }} extends Controller
{
    public function index()
    {
        return view('{{ $resources }}.pages.{{ $features.users.table_name }}.index');
    }

    public function create()
    {
        return view('{{ $resources }}.pages.{{ $features.users.table_name }}.create');
    }

    public function edit($id)
    {
        $user = {{ $features.users.model_name }}::findOrFail($id);

        return view('{{ $resources }}.pages.{{ $features.users.table_name }}.edit', compact('user'));
    }

    public function store(Request $request)
    {
        $data = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:{{ $features.users.table_name }},email',
            'password' => [
                'required',
                Password::min(8)
                    ->mixedCase()
                    ->letters()
                    ->numbers()
                    ->symbols(),
            ]
        ]);

        $data['password'] = bcrypt(Str::random(16));
        {{ $features.users.model_name }}::create($data);

        return redirect()->route('{{ $routing.as }}{{ $features.users.table_name }}.index');
    }

    public function update(Request $request, $id)
    {
        $data = $request->validate([
            'name' => 'required|string|max:255',
            'password' => [
                'sometimes',
                'nullable',
                Password::min(8)
                    ->mixedCase()
                    ->letters()
                    ->numbers()
                    ->symbols(),
            ]
        ]);

        if (Arr::has($data, 'password') && ($data['password'] == null || $data['password'] == '')) {
            unset($data['password']);
        }

        $user = {{ $features.users.model_name }}::findOrFail($id);
        $user->update($data);
        $user->save();

        return redirect()->route('{{ $routing.as }}{{ $features.users.table_name }}.show', $user->id);
    }

    public function destroy($id)
    {
        {{ $features.users.model_name }}::findOrFail($id)->delete();

        return redirect()->route('{{ $routing.as }}{{ $features.users.table_name }}.index');
    }
}
